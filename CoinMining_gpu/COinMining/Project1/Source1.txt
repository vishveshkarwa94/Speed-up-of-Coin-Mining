#include <iostream>
#include <string> 
#include <iomanip>
#include <math.h>
#include <sstream>
#include <sys/time.h>

//// Accessible by ALL CPU and GPU functions !!!
__managed__ unsigned long long int c;
__managed__ unsigned long long int m;
__managed__ bool flag;

__global__
void cuberoots(unsigned long long int n)
{

	// index = block index * number of threads per block + thread index
    int index = blockIdx.x * blockDim.x + threadIdx.x;
    // stride  = number threads per block * number of block per grid
    int stride = blockDim.x * gridDim.x;
	
	for (unsigned long long int a = index; a < n; a = a + stride) {
			m = (((a % n )* (a % n)) % n * (a % n)) % n;
			if (m == c) {
				cout << a << "^3 = " << c << " (mod " << n << ")" << endl;
				flag = true;
			}
		}
}
int main(int argc, char* argv[]) {
	if (argc!=2){
		cout << "Wrong commandline args: Input CipherText & Modulus N " <<endl;
		return 1;
	}
	c = std::strtoull(argv[1],nullptr,10);
	n = std::strtoull(argv[2],nullptr,10);
	flag = false;
	int blockSize = 256;
	int numBlocks = (total_points + blockSize - 1) / blockSize;
	cuberoots<<<numBlocks, blockSize>>>(n);

	// Wait for GPU to finish before accessing on host
	cudaDeviceSynchronize();	
	if (flag == false)
		cout << "No cube roots of " << c << " (mod " << n << ")" <<endl;
	return 0;
}

